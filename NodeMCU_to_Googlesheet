#include <SPI.h>
#include <MFRC522.h>
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClientSecureBearSSL.h>

#define RST_PIN D3
#define SS_PIN D4
#define BUZZER D2

MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;
MFRC522::StatusCode status;

int blockNum = 2;
byte bufferLen = 32;
byte readBlockData[32];

String card_holder_name;
const String sheet_url = "Enter google spreadsheet link + ?name=";

#define WIFI_SSID "Enter Your wifi name"
#define WIFI_PASSWORD "Enter your Wifi Password"

void setup() {
    Serial.begin(9600);
    Serial.print("Connecting to AP");
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    while (WiFi.status() != WL_CONNECTED) {
        Serial.print("...");
        delay(200);
    }
    Serial.println("\nWiFi connected. IP address: ");
    Serial.println(WiFi.localIP());
    pinMode(BUZZER, OUTPUT);
    SPI.begin();
}

void loop() {
    mfrc522.PCD_Init();
    if (!mfrc522.PICC_IsNewCardPresent()) return;
    if (!mfrc522.PICC_ReadCardSerial()) return;

    Serial.println("\nReading last data from RFID...");
    ReadDataFromBlock(blockNum, readBlockData);
    Serial.print("Last data in RFID:");
    Serial.print(blockNum);
    Serial.print(" --> ");
    for (int j = 0; j < 32; j++) Serial.write(readBlockData[j]);
    Serial.println();

    digitalWrite(BUZZER, HIGH);
    delay(200);
    digitalWrite(BUZZER, LOW);
    delay(200);
    digitalWrite(BUZZER, HIGH);
    delay(200);
    digitalWrite(BUZZER, LOW);

    if (WiFi.status() == WL_CONNECTED) {
        std::unique_ptr<BearSSL::WiFiClientSecure> client(new BearSSL::WiFiClientSecure);
        client->setInsecure();
        card_holder_name = sheet_url + String((char*)readBlockData);
        card_holder_name.trim();
        Serial.println(card_holder_name);

        HTTPClient https;
        Serial.print("[HTTPS] begin...\n");
        if (https.begin(*client, card_holder_name)) {
            Serial.print("[HTTPS] GET...\n");
            int httpCode = https.GET();
            if (httpCode > 0) {
                Serial.printf("[HTTPS] GET... code: %d\n", httpCode);
            } else {
                Serial.printf("[HTTPS] GET... failed, error: %s\n", https.errorToString(httpCode).c_str());
            }
            https.end();
            delay(1000);
        } else {
            Serial.printf("[HTTPS] Unable to connect\n");
        }
    }
    mfrc522.PICC_HaltA();
    mfrc522.PCD_StopCrypto1();
}

void ReadDataFromBlock(int blockNum, byte readBlockData[]) {
    for (byte i = 0; i < 6; i++) key.keyByte[i] = 0xFF;
    status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, blockNum, &key, &(mfrc522.uid));
    if (status != MFRC522::STATUS_OK) {
        Serial.print("Authentication failed for Read: ");
        Serial.println(mfrc522.GetStatusCodeName(status));
        return;
    }
    Serial.println("Authentication success");
    status = mfrc522.MIFARE_Read(blockNum, readBlockData, &bufferLen);
    if (status != MFRC522::STATUS_OK) {
        Serial.print("Reading failed: ");
        Serial.println(mfrc522.GetStatusCodeName(status));
        return;
    }
    Serial.println("Block was read successfully");
}
